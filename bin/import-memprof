#!/usr/bin/env php
<?php

declare(strict_types=1);

set_error_handler(function($no, $str, $file, $line) {
    throw new \ErrorException($str, $no, 1, $file, $line);
});

$run_id = $argv[1];
$data = json_decode(file_get_contents('php://stdin'), true);

require(__DIR__.'/../vendor/autoload.php');

use GraphAware\Neo4j\Client\ClientBuilder;
$client = ClientBuilder::create()->addConnection('bolt', getenv('NEO4J_URL'))->build();

$stack = $client->stack();

function import_memprof($run_id, $stack, string $caller, array $stats) {
    $stack->push('MERGE (:Function {name: {name}})', ['name' => $caller]);

    foreach ($stats['called_functions'.chr(0)] as $callee => $calleeStats) {
        error_log(sprintf('%s==>%s', $caller, $callee));
        $stack->push('MERGE (:Function {name: {name}})', ['name' => $callee]);

        $stack->push(<<<CYPHER
            MATCH (caller:Function {name: {caller}}),(callee:Function {name: {callee}})
            CREATE (caller)-[:CALLS {stats}]->(callee)
CYPHER
        , [
            'stats' => [
                'memory_size' => $calleeStats['memory_size'.chr(0)],
                'blocks_count' => $calleeStats['blocks_count'.chr(0)],
                'memory_size_inclusive' => $calleeStats['memory_size_inclusive'.chr(0)],
                'blocks_count_inclusive' => $calleeStats['blocks_count_inclusive'.chr(0)],
                'calls' => $calleeStats['calls'.chr(0)],
                'run_id' => $run_id,
            ],
            'caller' => $caller,
            'callee' => $callee,
        ]);

        import_memprof($run_id, $stack, $callee, $calleeStats);
    }
}

import_memprof($run_id, $stack, '__main__', $data);

$results = $client->runStack($stack);
